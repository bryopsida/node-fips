name: CI
on:
  workflow_dispatch:
  schedule:
    - cron: '22 4 * * *'
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
jobs:
    build-image:
        name: Build
        env:
          REGISTRY: ghcr.io/bryopsida
          IMAGE_NAME: node-fips
          CODEQL_ENABLED: true
        permissions:
          contents: read
          packages: write
          id-token: write
          security-events: write
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
          - name: Install cosign
            if: github.event_name != 'pull_request'
            uses: sigstore/cosign-installer@e9a05e6d32d7ed22b5656cd874ef31af58d05bfa
            with:
              cosign-release: 'v1.13.6'
          # for multi arch container builds
          - name: Set up QEMU
            uses: docker/setup-qemu-action@master
            with:
              platforms: all
          - name: Setup Docker buildx
            id: buildx
            timeout-minutes: 4
            uses: docker/setup-buildx-action@e600775e527acba2317260cadb64b7e19efd5362
          - name: Log into registry
            timeout-minutes: 5
            uses: docker/login-action@6d4b68b490aef8836e8fb5e50ee7b3bdfa5894f0
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}
          - name: Get Default Branch Name
            id: default-branch
            env:
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: echo "name=$(gh repo view --json defaultBranchRef --jq .defaultBranchRef.name) >> $GITHUB_OUTPUT"
          - name: Extract Docker metadata
            id: meta
            timeout-minutes: 5
            uses: docker/metadata-action@418e4b98bf2841bd337d0b24fe63cb36dc8afa55
            with:
              images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
              tags: |
                type=ref,event=branch
                type=ref,event=pr
                type=schedule
                type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', steps.default-branch.outputs.name) }}
                type=semver,pattern={{version}}
                type=semver,pattern={{major}}.{{minor}}
                type=sha
                type=raw,value={{date 'YYYYMMDD'}}-{{sha}}
          - name: Display structure before build
            run: ls -R
          - name: Build Docker image
            id: build
            timeout-minutes: 120
            uses: docker/build-push-action@0788c444d8b4d67580213712e34a148cae3a6c4e
            with:
              context: .
              load: true
              push: false
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
              cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
              cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          - name: Get Short SHA
            id: short-sha
            run: |
              export SHORT_SHA=$(git rev-parse --short HEAD)
              export SHORT_SHA_TAG_ONLY=sha-$SHORT_SHA
              echo "sha_short=$SHORT_SHA" >> $GITHUB_OUTPUT
              echo "build_tag=$SHORT_SHA_TAG_ONLY" >> $GITHUB_OUTPUT
              echo "sha_tag=${{ env.REGISTRY}}/${{ env.IMAGE_NAME }}:sha-$SHORT_SHA" >> $GITHUB_OUTPUT
            
          - name: Scan image
            id: scan
            uses: aquasecurity/trivy-action@master
            with:
              image-ref: ${{ steps.short-sha.outputs.sha_tag }}
              format: 'sarif'
              output: 'scan-results.sarif'
          - name: Upload Container Scan SARIF report
            uses: github/codeql-action/upload-sarif@v3
            with:
              sarif_file: 'scan-results.sarif'
          - name: Push image
            id: push
            timeout-minutes: 240
            uses: docker/build-push-action@0788c444d8b4d67580213712e34a148cae3a6c4e
            with:
              context: .
              builder: ${{ steps.buildx.outputs.name }}
              load: false
              push: true
              tags: ${{ steps.meta.outputs.tags }}
              labels: ${{ steps.meta.outputs.labels }}
              cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
              cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
              platforms: linux/amd64,linux/arm64
          - name: Sign the published Docker image
            if: ${{ github.event_name != 'pull_request' }}
            env:
              COSIGN_EXPERIMENTAL: "true"
            run: cosign sign --force --recursive ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.push.outputs.digest }}
